name: assess modernisation effort
on:
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]

env:
# This prevents first startup interactive expectations generating errors for the app cat CLIðŸ‘‡
  DOTNET_APPCAT_SKIP_FIRST_TIME_EXPERIENCE: true
# This is the name of the function app that will receive the report ðŸ‘‡
  FUNCTION_APP_NAME: 'appcatfunction'
  FUNCTION_NAME: 'shipper'
  FUNCTION_APP_VERB: 'PUT'
# This is the target and destination for modernisation
  TARGET: 'AppService.Linux'
  DOTNET_APP_PATH: './implementation/azure-search-openai-demo-csharp/app'
  REPORT_FOLDER: 'appcat-results/reports'
  REPORT_JSON_FILENAME: 'reports.appcat.json'


jobs:
  assess_modernisation_effort:

    runs-on: ubuntu-latest

    steps:
    - uses: actions/checkout@v3
      with:
        submodules: 'recursive'
    # The analysis version used doesn't matter afaik so you can always use the latest versions to support analysis
    - name: Setup .NET
      uses: actions/setup-dotnet@v3
      with:
        dotnet-version: 8.0.x
    - name: Install appcat
      run: dotnet tool install -g dotnet-appcat --version 0.1.97
    - name: Run appcat JSON
      # This creates the payload for the datalake to give overall visibility of the modernisation effort
      run: appcat analyze ${{ env.DOTNET_APP_PATH }} --source folder --report ${{ env.REPORT_FOLDER }} --serializer json --non-interactive --code --binaries --target ${{ env.TARGET}}
    - name: Run appcat HTML
      # This creates a downloadable html report for this repo for the user to view
      run: appcat analyze ${{ env.DOTNET_APP_PATH }} --source folder --report ${{ env.REPORT_FOLDER }}/html --serializer html --non-interactive --code --binaries --target ${{ env.TARGET}}
    - name: Upload results
      uses: actions/upload-artifact@v4
      with:
        path: appcat-results/
    - name: Send report
      run: |
        curl -X ${{ env.FUNCTION_APP_VERB }} "https://${{ env.FUNCTION_APP_NAME }}.azurewebsites.net/api/${{ env.FUNCTION_NAME }}?org=${{ github.repository_owner }}&repo=${{ github.repository }}&branch=${{ github.ref_name }}&pr=${{ github.event.pull_request.number }}&commit=${{ github.sha }}&committer=${{ github.actor }}" \
        -H "Content-Type: application/json" \
        --data "$(cat ${{ env.REPORT_FOLDER }}/${{ env.REPORT_JSON_FILENAME }})"